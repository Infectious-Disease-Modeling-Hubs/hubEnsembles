[{"path":"https://infectious-disease-modeling-hubs.github.io/hubEnsembles/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Consortium Infectious Disease Modeling Hubs Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://infectious-disease-modeling-hubs.github.io/hubEnsembles/articles/hubEnsembles.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"The `hubEnsembles` package","text":"hubEnsembles package includes functionality aggregating model outputs, forecasts projections, submitted hub multiple models combined ensemble model outputs. package includes two main functions: simple_ensemble linear_pool. illustrate functions vignette, briefly compare . vignette uses following R packages:","code":"library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(plotly) #> Loading required package: ggplot2 #>  #> Attaching package: 'plotly' #> The following object is masked from 'package:ggplot2': #>  #>     last_plot #> The following object is masked from 'package:stats': #>  #>     filter #> The following object is masked from 'package:graphics': #>  #>     layout library(hubUtils) library(hubEnsembles)"},{"path":"https://infectious-disease-modeling-hubs.github.io/hubEnsembles/articles/hubEnsembles.html","id":"example-data-a-simple-forecast-hub","dir":"Articles","previous_headings":"","what":"Example data: a simple forecast hub","title":"The `hubEnsembles` package","text":"example-simple-forecast-hub created Consortium Infectious Disease Modeling Hubs simple example hub demonstrate set functionality hubverse. hub includes target data example model output data.","code":"hub_path <- system.file(\"example-data/example-simple-forecast-hub\",                         package = \"hubEnsembles\")  model_outputs <- hubUtils::connect_hub(hub_path) %>%   dplyr::collect() head(model_outputs) #> # A tibble: 6 × 8 #>   origin_date horizon location target  output_type output_type_id value model_id #>   <date>        <int> <chr>    <chr>   <chr>                <dbl> <int> <chr>    #> 1 2022-12-05       -6 20       inc co… quantile             0.01     22 UMass-ar #> 2 2022-12-05       -6 20       inc co… quantile             0.025    24 UMass-ar #> 3 2022-12-05       -6 20       inc co… quantile             0.05     26 UMass-ar #> 4 2022-12-05       -6 20       inc co… quantile             0.1      28 UMass-ar #> 5 2022-12-05       -6 20       inc co… quantile             0.15     30 UMass-ar #> 6 2022-12-05       -6 20       inc co… quantile             0.2      32 UMass-ar  target_data_path <- file.path(hub_path, \"target-data\",                               \"covid-hospitalizations.csv\") target_data <- read.csv(target_data_path) head(target_data) #>     time_idx location value         target #> 1 2021-03-21       46    12 inc covid hosp #> 2 2021-03-04       45    82 inc covid hosp #> 3 2021-02-26       46     7 inc covid hosp #> 4 2021-02-20       44    21 inc covid hosp #> 5 2021-02-09       44    19 inc covid hosp #> 6 2021-01-25       25   224 inc covid hosp"},{"path":"https://infectious-disease-modeling-hubs.github.io/hubEnsembles/articles/hubEnsembles.html","id":"creating-ensembles-with-simple_ensemble","dir":"Articles","previous_headings":"","what":"Creating ensembles with simple_ensemble","title":"The `hubEnsembles` package","text":"simple_ensemble function used summarize across component model outputs; function can applied predictions output_type mean, median, quantile, cdf, pmf. simple_ensemble function defaults calculating equally weighted mean across component model outputs unique output_type_id. example data, contains two output types (median quantile), means resulting ensemble mean component model submitted values quantile.","code":"mean_ens <- hubEnsembles::simple_ensemble(model_outputs) head(mean_ens) #> # A tibble: 6 × 8 #>   model_id  origin_date horizon location target output_type output_type_id value #>   <chr>     <date>        <int> <chr>    <chr>  <chr>                <dbl> <dbl> #> 1 hub-ense… 2022-12-05       -6 20       inc c… median              NA      37.3 #> 2 hub-ense… 2022-12-05       -6 20       inc c… quantile             0.01   14.7 #> 3 hub-ense… 2022-12-05       -6 20       inc c… quantile             0.025  15.7 #> 4 hub-ense… 2022-12-05       -6 20       inc c… quantile             0.05   17   #> 5 hub-ense… 2022-12-05       -6 20       inc c… quantile             0.1    18.3 #> 6 hub-ense… 2022-12-05       -6 20       inc c… quantile             0.15   21.7"},{"path":"https://infectious-disease-modeling-hubs.github.io/hubEnsembles/articles/hubEnsembles.html","id":"changing-the-aggregation-function","dir":"Articles","previous_headings":"Creating ensembles with simple_ensemble","what":"Changing the aggregation function","title":"The `hubEnsembles` package","text":"can change function used aggregate across model outputs. example, may want calculate median component model submitted values quantile. also use model_id argument distinguish ensemble. Custom functions can also passed agg_fun argument. example, geometric mean may appropriate way combine component model outputs. custom function used requires argument x vector numeric values summarize, relevant, argument w numeric weights.","code":"median_ens <- hubEnsembles::simple_ensemble(model_outputs,                                              agg_fun = median,                                              model_id = \"hub-ensemble-median\") head(median_ens) #> # A tibble: 6 × 8 #>   model_id  origin_date horizon location target output_type output_type_id value #>   <chr>     <date>        <int> <chr>    <chr>  <chr>                <dbl> <int> #> 1 hub-ense… 2022-12-05       -6 20       inc c… median              NA        37 #> 2 hub-ense… 2022-12-05       -6 20       inc c… quantile             0.01     22 #> 3 hub-ense… 2022-12-05       -6 20       inc c… quantile             0.025    23 #> 4 hub-ense… 2022-12-05       -6 20       inc c… quantile             0.05     25 #> 5 hub-ense… 2022-12-05       -6 20       inc c… quantile             0.1      27 #> 6 hub-ense… 2022-12-05       -6 20       inc c… quantile             0.15     28 geometric_mean <- function(x){     n <- length(x)     return(prod(x)^(1/n)) }  geometric_mean_ens <-  hubEnsembles::simple_ensemble(model_outputs,                                              agg_fun = geometric_mean,                                              model_id = \"hub-ensemble-geometric\") head(geometric_mean_ens) #> # A tibble: 6 × 8 #>   model_id  origin_date horizon location target output_type output_type_id value #>   <chr>     <date>        <int> <chr>    <chr>  <chr>                <dbl> <dbl> #> 1 hub-ense… 2022-12-05       -6 20       inc c… median              NA      37.3 #> 2 hub-ense… 2022-12-05       -6 20       inc c… quantile             0.01    0   #> 3 hub-ense… 2022-12-05       -6 20       inc c… quantile             0.025   0   #> 4 hub-ense… 2022-12-05       -6 20       inc c… quantile             0.05    0   #> 5 hub-ense… 2022-12-05       -6 20       inc c… quantile             0.1     0   #> 6 hub-ense… 2022-12-05       -6 20       inc c… quantile             0.15   18.0"},{"path":"https://infectious-disease-modeling-hubs.github.io/hubEnsembles/articles/hubEnsembles.html","id":"weighting-model-contributions","dir":"Articles","previous_headings":"Creating ensembles with simple_ensemble","what":"Weighting model contributions","title":"The `hubEnsembles` package","text":"addition, can weight contributions model providing table weights, provided data.frame model_id column weight column.","code":"model_weights <- data.frame(model_id = c(\"UMass-ar\", \"UMass-gbq\", \"simple_hub-baseline\"),                              weight = c(0.4, 0.4, 0.2))  weighted_mean_ens <- hubEnsembles::simple_ensemble(model_outputs,                                                     weights = model_weights,                                                     model_id = \"hub-ensemble-weighted-mean\") head(weighted_mean_ens) #> # A tibble: 6 × 8 #>   model_id  origin_date horizon location target output_type output_type_id value #>   <chr>     <date>        <int> <chr>    <chr>  <chr>                <dbl> <dbl> #> 1 hub-ense… 2022-12-05       -6 20       inc c… median              NA      37.6 #> 2 hub-ense… 2022-12-05       -6 20       inc c… quantile             0.01   17.6 #> 3 hub-ense… 2022-12-05       -6 20       inc c… quantile             0.025  18.8 #> 4 hub-ense… 2022-12-05       -6 20       inc c… quantile             0.05   20.4 #> 5 hub-ense… 2022-12-05       -6 20       inc c… quantile             0.1    22   #> 6 hub-ense… 2022-12-05       -6 20       inc c… quantile             0.15   24.6"},{"path":"https://infectious-disease-modeling-hubs.github.io/hubEnsembles/articles/hubEnsembles.html","id":"creating-ensembles-with-linear_pool","dir":"Articles","previous_headings":"","what":"Creating ensembles with linear_pool","title":"The `hubEnsembles` package","text":"alternative approach generate ensemble linear pool, distributional mixture; function can applied predictions output_type mean, quantile, cdf, pmf. example hub includes median output type, exclude calculation. mean, cdf pmf output types, linear pool equivalent using mean simple_ensemble. quantile model outputs, linear_pool function needs approximate full probability distribution using value-quantile pairs component model. default, done functions distfromq package, defaults fitting monotonic cubic spline.","code":"linear_pool_ens <- hubEnsembles::linear_pool(model_outputs %>%                                                filter(output_type != \"median\")) head(linear_pool_ens) #> # A tibble: 6 × 8 #>   model_id  origin_date horizon location target output_type output_type_id value #>   <chr>     <date>        <int> <chr>    <chr>  <chr>       <chr>          <dbl> #> 1 hub-ense… 2022-12-05       -6 20       inc c… quantile    0.01            0    #> 2 hub-ense… 2022-12-05       -6 20       inc c… quantile    0.025           0    #> 3 hub-ense… 2022-12-05       -6 20       inc c… quantile    0.05            7.01 #> 4 hub-ense… 2022-12-05       -6 20       inc c… quantile    0.1            21.1  #> 5 hub-ense… 2022-12-05       -6 20       inc c… quantile    0.15           25.6  #> 6 hub-ense… 2022-12-05       -6 20       inc c… quantile    0.2            27.6"},{"path":"https://infectious-disease-modeling-hubs.github.io/hubEnsembles/articles/hubEnsembles.html","id":"plots","dir":"Articles","previous_headings":"","what":"Plots","title":"The `hubEnsembles` package","text":"","code":"basic_plot_function <- function(plot_df, truth_df, plain_line = 0.5, ribbon = c(0.975, 0.025),                                 forecast_date) {    plain_df <- dplyr::filter(plot_df, output_type_id == plain_line)    ribbon_df <- dplyr::filter(plot_df, output_type_id %in% ribbon) %>%     dplyr::mutate(output_type_id = ifelse(output_type_id == min(ribbon),                                           \"min\", \"max\")) %>%      tidyr::pivot_wider(names_from = output_type_id, values_from = value)    plot_model <- plot_ly(height = 600, colors = scales::hue_pal()(50))     if (!is.null(truth_df)) {     plot_model <- plot_model %>%        add_trace(data = truth_df, x = ~time_idx, y = ~value, type = \"scatter\",                 mode = \"lines+markers\", line = list(color = \"#6e6e6e\"),                 hoverinfo = \"text\", name = \"ground truth\",                 hovertext = paste(\"Date: \", truth_df$time_value, \"<br>\",                                    \"Ground truth: \",                                    format(truth_df$value, big.mark = \",\"),                               sep = \"\"),                  marker = list(color = \"#6e6e6e\", size = 7))   }   plot_model <- plot_model %>%      add_lines(data = plain_df, x = ~target_date, y = ~value,                color = ~model_id) %>%      add_ribbons(data = ribbon_df, x = ~target_date, ymin = ~min,                  ymax = ~max, color = ~model_id, opacity = 0.25,                  line = list(width = 0), showlegend = FALSE) %>%     plotly::layout(shapes = list(type = \"line\", y0 = 0, y1 = 1, yref = \"paper\",                                 x0 = forecast_date, x1 = forecast_date,                                 line = list(color = \"gray\"))) } plot_df <- dplyr::bind_rows(model_outputs, mean_ens) %>%   dplyr::filter(location == \"US\", origin_date == \"2022-12-12\") %>%   dplyr::mutate(target_date = origin_date + horizon)  plot <- basic_plot_function(     plot_df,     truth_df = target_data %>%         dplyr::filter(location == \"US\",                       time_idx >= \"2022-10-01\",                       time_idx <= \"2023-03-01\"),     forecast_date = \"2022-12-12\") plot #> Warning: Can't display both discrete & non-discrete data on same axis"},{"path":"https://infectious-disease-modeling-hubs.github.io/hubEnsembles/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Anna Krystalli. Author, maintainer. Evan L Ray. Author. Li Shandross. Author.","code":""},{"path":"https://infectious-disease-modeling-hubs.github.io/hubEnsembles/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Krystalli , Ray E, Shandross L (2023). hubEnsembles: Ensemble methods combining hub model outputs. R package version 0.0.0.9000,  https://infectious-disease-modeling-hubs.github.io/hubEnsembles/, https://github.com/Infectious-Disease-Modeling-Hubs/hubEnsembles.","code":"@Manual{,   title = {hubEnsembles: Ensemble methods for combining hub model outputs},   author = {Anna Krystalli and Evan L Ray and Li Shandross},   year = {2023},   note = {R package version 0.0.0.9000,  https://infectious-disease-modeling-hubs.github.io/hubEnsembles/},   url = {https://github.com/Infectious-Disease-Modeling-Hubs/hubEnsembles}, }"},{"path":"https://infectious-disease-modeling-hubs.github.io/hubEnsembles/index.html","id":"hubensembles","dir":"","previous_headings":"","what":"Ensemble methods for combining hub model outputs","title":"Ensemble methods for combining hub model outputs","text":"goal hubEnsembles provide standard implementations commonly used methods ensembling model outputs. hubEnsembles package part hubverse project expects input data key functions formatted object model_out_tbl class.","code":""},{"path":"https://infectious-disease-modeling-hubs.github.io/hubEnsembles/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Ensemble methods for combining hub model outputs","text":"can install development version hubEnsembles using code:","code":"remotes::install_github(\"infectious-disease-modeling-hubs/hubEnsembles\")"},{"path":"https://infectious-disease-modeling-hubs.github.io/hubEnsembles/reference/linear_pool.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute ensemble model outputs as a linear pool, otherwise known as a\ndistributional mixture, of component model outputs for\neach combination of model task, output type, and output type id. Supported\noutput types include mean, quantile, cdf, and pmf. — linear_pool","title":"Compute ensemble model outputs as a linear pool, otherwise known as a\ndistributional mixture, of component model outputs for\neach combination of model task, output type, and output type id. Supported\noutput types include mean, quantile, cdf, and pmf. — linear_pool","text":"Compute ensemble model outputs linear pool, otherwise known distributional mixture, component model outputs combination model task, output type, output type id. Supported output types include mean, quantile, cdf, pmf.","code":""},{"path":"https://infectious-disease-modeling-hubs.github.io/hubEnsembles/reference/linear_pool.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute ensemble model outputs as a linear pool, otherwise known as a\ndistributional mixture, of component model outputs for\neach combination of model task, output type, and output type id. Supported\noutput types include mean, quantile, cdf, and pmf. — linear_pool","text":"","code":"linear_pool(   model_outputs,   weights = NULL,   weights_col_name = \"weight\",   model_id = \"hub-ensemble\",   task_id_cols = NULL,   n_samples = 10000,   ... )"},{"path":"https://infectious-disease-modeling-hubs.github.io/hubEnsembles/reference/linear_pool.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute ensemble model outputs as a linear pool, otherwise known as a\ndistributional mixture, of component model outputs for\neach combination of model task, output type, and output type id. Supported\noutput types include mean, quantile, cdf, and pmf. — linear_pool","text":"model_outputs object class model_output_df component model outputs (e.g., predictions). weights optional data.frame component model weights. provided, column named model_id column containing model weights. Optionally, may contain additional columns corresponding task id variables, output_type, output_type_id, weights specific values variables. default NULL, case equally-weighted ensemble calculated. weights_col_name character string naming column weights model weights. Defaults \"weight\" model_id character string identifier use ensemble model. task_id_cols character vector names columns model_outputs specify modeling tasks. Defaults NULL, case columns model_outputs \"model_id\", specified output_type_col output_type_id_col, \"value\" used task ids. n_samples numeric specifies number samples use calculating quantiles estimated quantile function. Defaults 1e4. ... parameters passed distfromq::make_q_fn, specifying details estimate quantile function provided quantile levels quantile values output_type \"quantile\".","code":""},{"path":"https://infectious-disease-modeling-hubs.github.io/hubEnsembles/reference/linear_pool.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute ensemble model outputs as a linear pool, otherwise known as a\ndistributional mixture, of component model outputs for\neach combination of model task, output type, and output type id. Supported\noutput types include mean, quantile, cdf, and pmf. — linear_pool","text":"model_out_tbl object ensemble predictions. Note additional columns input model_outputs dropped.","code":""},{"path":"https://infectious-disease-modeling-hubs.github.io/hubEnsembles/reference/linear_pool.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute ensemble model outputs as a linear pool, otherwise known as a\ndistributional mixture, of component model outputs for\neach combination of model task, output type, and output type id. Supported\noutput types include mean, quantile, cdf, and pmf. — linear_pool","text":"underlying mechanism computations varies different output_types. output_type cdf, pmf, mean, function simply calls simple_ensemble calculate (weighted) mean component model outputs. definitional calculation cdf pmf linear pool. mean output type, justified fact (weighted) mean linear pool (weighted) mean means component distributions. output_type quantile, obtain quantiles linear pool three steps: 1. Interpolate extrapolate provided quantiles component model obtain estimate cdf distribution. 2. Draw samples distribution component model. reduce Monte Carlo variability, use pseudo-random samples corresponding quantiles estimated distribution. 3. Collect samples component models extract desired quantiles. Steps 1 2 process performed distfromq::make_q_fn.","code":""},{"path":"https://infectious-disease-modeling-hubs.github.io/hubEnsembles/reference/linear_pool.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute ensemble model outputs as a linear pool, otherwise known as a\ndistributional mixture, of component model outputs for\neach combination of model task, output type, and output type id. Supported\noutput types include mean, quantile, cdf, and pmf. — linear_pool","text":"","code":"# We illustrate the calculation of a linear pool when we have quantiles from the # component models. We take the components to be normal distributions with # means -3, 0, and 3, all standard deviations 1, and weights 0.25, 0.5, and 0.25. library(purrr) component_ids <- letters[1:3] component_weights <- c(0.25, 0.5, 0.25) component_means <- c(-3, 0, 3)  lp_qs <- seq(from = -5, to = 5, by = 0.25) # linear pool quantiles, expected outputs ps <- rep(0, length(lp_qs)) for (m in seq_len(3)) {   ps <- ps + component_weights[m] * pnorm(lp_qs, mean = component_means[m]) }  component_qs <- purrr::map(component_means, ~ qnorm(ps, mean=.x)) %>% unlist() component_outputs <- data.frame(   stringsAsFactors = FALSE,   model_id = rep(component_ids, each = length(lp_qs)),   target = \"inc death\",   output_type = \"quantile\",   output_type_id = ps,   value = component_qs)  lp_from_component_qs <- linear_pool(   component_outputs,   weights = data.frame(model_id = component_ids, weight = component_weights))  head(lp_from_component_qs) #> # A tibble: 6 × 5 #>   model_id     target    output_type output_type_id     value #>   <chr>        <chr>     <chr>       <chr>              <dbl> #> 1 hub-ensemble inc death quantile    0.0056876763128309 -5.00 #> 2 hub-ensemble inc death quantile    0.0100152977575767 -4.75 #> 3 hub-ensemble inc death quantile    0.0167034991537849 -4.50 #> 4 hub-ensemble inc death quantile    0.0264177876796534 -4.25 #> 5 hub-ensemble inc death quantile    0.0396796491041008 -4.00 #> 6 hub-ensemble inc death quantile    0.0567010467386655 -3.75 all.equal(lp_from_component_qs$value, lp_qs, tolerance = 1e-3,           check.attributes=FALSE) #> [1] TRUE"},{"path":"https://infectious-disease-modeling-hubs.github.io/hubEnsembles/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://infectious-disease-modeling-hubs.github.io/hubEnsembles/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://infectious-disease-modeling-hubs.github.io/hubEnsembles/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://infectious-disease-modeling-hubs.github.io/hubEnsembles/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://infectious-disease-modeling-hubs.github.io/hubEnsembles/reference/simple_ensemble.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute ensemble model outputs by summarizing component model outputs for\neach combination of model task, output type, and output type id. Supported\noutput types include mean, median, quantile, cdf, and pmf. — simple_ensemble","title":"Compute ensemble model outputs by summarizing component model outputs for\neach combination of model task, output type, and output type id. Supported\noutput types include mean, median, quantile, cdf, and pmf. — simple_ensemble","text":"Compute ensemble model outputs summarizing component model outputs combination model task, output type, output type id. Supported output types include mean, median, quantile, cdf, pmf.","code":""},{"path":"https://infectious-disease-modeling-hubs.github.io/hubEnsembles/reference/simple_ensemble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute ensemble model outputs by summarizing component model outputs for\neach combination of model task, output type, and output type id. Supported\noutput types include mean, median, quantile, cdf, and pmf. — simple_ensemble","text":"","code":"simple_ensemble(   model_outputs,   weights = NULL,   weights_col_name = \"weight\",   agg_fun = \"mean\",   agg_args = list(),   model_id = \"hub-ensemble\",   task_id_cols = NULL )"},{"path":"https://infectious-disease-modeling-hubs.github.io/hubEnsembles/reference/simple_ensemble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute ensemble model outputs by summarizing component model outputs for\neach combination of model task, output type, and output type id. Supported\noutput types include mean, median, quantile, cdf, and pmf. — simple_ensemble","text":"model_outputs object class model_out_tbl component model outputs (e.g., predictions). weights optional data.frame component model weights. provided, column named model_id column containing model weights. Optionally, may contain additional columns corresponding task id variables, output_type, output_type_id, weights specific values variables. default NULL, case equally-weighted ensemble calculated. weights_col_name character string naming column weights model weights. Defaults \"weight\" agg_fun function character string name function use aggregating component model outputs ensemble outputs. See details information. agg_args named list additional arguments passed agg_fun. model_id character string identifier use ensemble model. task_id_cols character vector names columns model_outputs specify modeling tasks. Defaults NULL, case columns model_outputs \"model_id\", specified output_type_col output_type_id_col, \"value\" used task ids.","code":""},{"path":"https://infectious-disease-modeling-hubs.github.io/hubEnsembles/reference/simple_ensemble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute ensemble model outputs by summarizing component model outputs for\neach combination of model task, output type, and output type id. Supported\noutput types include mean, median, quantile, cdf, and pmf. — simple_ensemble","text":"model_out_tbl object ensemble predictions. Note additional columns input model_outputs dropped.","code":""},{"path":"https://infectious-disease-modeling-hubs.github.io/hubEnsembles/reference/simple_ensemble.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute ensemble model outputs by summarizing component model outputs for\neach combination of model task, output type, and output type id. Supported\noutput types include mean, median, quantile, cdf, and pmf. — simple_ensemble","text":"default agg_fun \"mean\", case ensemble's output average component model outputs within group defined combination values task id columns, output type, output type id. provided agg_fun argument x vector numeric values summarize, weighted methods, argument w numeric vector weights. desired use aggregation function accept arguments, wrapper need written. weighted methods, agg_fun = \"mean\" agg_fun = \"median\" translated use matrixStats::weightedMean matrixStats::weightedMedian respectively.","code":""}]
